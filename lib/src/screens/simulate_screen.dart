import 'package:flutter_saimmod_3/src/blocs/calc_bloc.dart';
import 'package:flutter_saimmod_3/src/blocs/simulate_bloc.dart';
import 'package:flutter_saimmod_3/src/support_classes/state_with_bag.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class SimulateScreenBuilder extends StatelessWidget {
  final List<StateInfo> data;
  SimulateScreenBuilder(this.data);

  @override
  Widget build(BuildContext context) {
    return Provider<SimulateBloc>(
      builder: (_) => SimulateBloc(data),
      dispose: (_, bloc) => bloc.dispose(),
      child: Consumer<SimulateBloc>(
        builder: (_, bloc, __) => Scaffold(
          appBar: AppBar(
            title: Text('Simulation'),
          ),
          body: SimulateScreen(bloc),
        ),
      ),
    );
  }
}

class SimulateScreen extends StatefulWidget {
  final SimulateBloc bloc;
  SimulateScreen(this.bloc);

  @override
  _SimulateScreenState createState() => _SimulateScreenState();
}

class _SimulateScreenState extends StateWithBag<SimulateScreen> {
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      bottom: false,
      child: ListView(
        children: <Widget>[
          StreamBuilder<SimulationResults>(
            stream: widget.bloc.results,
            builder: (_, snapshot) {
              if (!snapshot.hasData) {
                return Center(
                  child: CircularProgressIndicator(),
                );
              }

              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Padding(
                      padding: const EdgeInsets.only(bottom: 10.0),
                      child: Text(
                        'Simulation info',
                        style:
                            TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
                      ),
                    ),
                    _createCustomText('Ticks: ${snapshot.data.ticks}'),
                    _createCustomText(
                        'Generated by source: ${snapshot.data.sumGenerated}'),
                    _createCustomText(
                        'Processed by system: ${snapshot.data.sumCalculated}'),
                    _createNodeInfo(snapshot.data.sumProcessed),
                    Padding(
                      padding: const EdgeInsets.only(bottom: 10.0),
                      child: Text(
                        'Calculated parameters',
                        style:
                            TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
                      ),
                    ),
                    _createCustomText('A = ${snapshot.data.A}'),
                    _createCustomText('L = ${snapshot.data.L}'),
                    _createCustomText('W = ${snapshot.data.W}'),
                    _createCustomText('Î» = ${snapshot.data.lambda}'),
                    _createCustomText('Q = ${snapshot.data.Q}'),
                    _createCustomText('P(error) = ${snapshot.data.pError}'),
                  ],
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _createCustomText(String str) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 10.0),
      child: Text(
        str,
        style: TextStyle(fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _createNodeInfo(List<int> nodesInfo) {
    List<Widget> info = [];
    for (int i = 0; i < nodesInfo.length; i++) {
      info.add(
          _createCustomText('Processed by ${i + 1} node: ${nodesInfo[i]}'));
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: info,
    );
  }

  @override
  void setupBindings() {
    // TODO: implement setupBindings
  }
}
